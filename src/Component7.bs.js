// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Component7Item$ReactTemplate = require("./Component7Item.bs.js");

var component = ReasonReact.reducerComponent("SimpleToDoList");

var marginHalfRem = {
  margin: "0.5rem"
};

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var onChange = function ($$event) {
        var value = $$event.target.value;
        return Curry._1(self[/* send */4], /* ChangeValue */Block.__(3, [value]));
      };
      var onSubmit = function ($$event) {
        $$event.preventDefault();
        return Curry._1(self[/* send */4], /* Add */0);
      };
      var onShowAll = function () {
        return Curry._1(self[/* send */4], /* ChangeView */Block.__(2, [/* All */0]));
      };
      var onShowCompletedOnly = function () {
        return Curry._1(self[/* send */4], /* ChangeView */Block.__(2, [/* Completed */1]));
      };
      var onShowNotCompletedOnly = function () {
        return Curry._1(self[/* send */4], /* ChangeView */Block.__(2, [/* NotCompleted */2]));
      };
      var match = self[/* state */2][/* view */1];
      var filterFunc;
      switch (match) {
        case 0 : 
            filterFunc = (function () {
                return /* true */1;
              });
            break;
        case 1 : 
            filterFunc = (function (i) {
                return i[/* completed */1];
              });
            break;
        case 2 : 
            filterFunc = (function (i) {
                return 1 - i[/* completed */1];
              });
            break;
        
      }
      var items = List.map((function (item) {
              return ReasonReact.element(/* Some */[String(item[/* id */0])], /* None */0, Component7Item$ReactTemplate.make(item, (function () {
                                return Curry._1(self[/* send */4], /* Delete */Block.__(1, [item]));
                              }), (function () {
                                return Curry._1(self[/* send */4], /* ToggleComplete */Block.__(0, [item]));
                              }), /* array */[]));
            }), List.filter(filterFunc)(self[/* state */2][/* list */0]));
      return React.createElement("div", undefined, $$Array.of_list(items), React.createElement("form", {
                      style: marginHalfRem,
                      onSubmit: onSubmit
                    }, React.createElement("input", {
                          value: self[/* state */2][/* value */2],
                          onChange: onChange
                        }), React.createElement("button", undefined, "Add")), React.createElement("button", {
                      style: marginHalfRem,
                      onClick: onShowAll
                    }, "Show All"), React.createElement("button", {
                      style: marginHalfRem,
                      onClick: onShowCompletedOnly
                    }, "Show Completed Only"), React.createElement("button", {
                      style: marginHalfRem,
                      onClick: onShowNotCompletedOnly
                    }, "Show Not Completed Only"));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* list : [] */0,
              /* view : All */0,
              /* value */"",
              /* nextItemId */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      var list = state[/* list */0];
      if (typeof action === "number") {
        return /* Update */Block.__(0, [/* record */[
                    /* list */List.append(list, /* :: */[
                          /* record */[
                            /* id */state[/* nextItemId */3],
                            /* completed : false */0,
                            /* description */state[/* value */2]
                          ],
                          /* [] */0
                        ]),
                    /* view */state[/* view */1],
                    /* value */"",
                    /* nextItemId */state[/* nextItemId */3] + 1 | 0
                  ]]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var completedItem = action[0];
              var updatedList = List.map((function (item) {
                      if (item[/* id */0] === completedItem[/* id */0]) {
                        return /* record */[
                                /* id */item[/* id */0],
                                /* completed */1 - completedItem[/* completed */1],
                                /* description */item[/* description */2]
                              ];
                      } else {
                        return item;
                      }
                    }), list);
              return /* Update */Block.__(0, [/* record */[
                          /* list */updatedList,
                          /* view */state[/* view */1],
                          /* value */state[/* value */2],
                          /* nextItemId */state[/* nextItemId */3]
                        ]]);
          case 1 : 
              var deletedItem = action[0];
              var updatedList$1 = List.filter((function (item) {
                        if (item[/* id */0] !== deletedItem[/* id */0]) {
                          return /* true */1;
                        } else {
                          return /* false */0;
                        }
                      }))(list);
              return /* Update */Block.__(0, [/* record */[
                          /* list */updatedList$1,
                          /* view */state[/* view */1],
                          /* value */state[/* value */2],
                          /* nextItemId */state[/* nextItemId */3]
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* list */state[/* list */0],
                          /* view */action[0],
                          /* value */state[/* value */2],
                          /* nextItemId */state[/* nextItemId */3]
                        ]]);
          case 3 : 
              return /* Update */Block.__(0, [/* record */[
                          /* list */state[/* list */0],
                          /* view */state[/* view */1],
                          /* value */action[0],
                          /* nextItemId */state[/* nextItemId */3]
                        ]]);
          
        }
      }
    });
  return newrecord;
}

exports.component = component;
exports.marginHalfRem = marginHalfRem;
exports.make = make;
/* component Not a pure module */
