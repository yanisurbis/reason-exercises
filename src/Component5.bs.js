// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function addSecond(param) {
  var seconds = param[/* seconds */1];
  var minutes = param[/* minutes */0];
  if (seconds < 60) {
    return /* record */[
            /* minutes */minutes,
            /* seconds */seconds + 1 | 0
          ];
  } else {
    return /* record */[
            /* minutes */minutes + 1 | 0,
            /* seconds */0
          ];
  }
}

function timeToString(param) {
  return String(param[/* minutes */0]) + (" minutes, " + (String(param[/* seconds */1]) + " seconds!"));
}

var component = ReasonReact.reducerComponent("Counter");

var initialTime = /* record */[
  /* minutes */0,
  /* seconds */0
];

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var time = self[/* state */2][/* time */0];
      var match = time === initialTime ? /* tuple */[
          "Start",
          /* Start */0
        ] : /* tuple */[
          "Stop",
          /* Stop */2
        ];
      var action = match[1];
      return React.createElement("div", undefined, React.createElement("p", undefined, timeToString(time)), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(self[/* send */4], action);
                        })
                    }, match[0]));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* time */initialTime,
              /* timerState : Stopped */1
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      switch (action) {
        case 0 : 
            return /* UpdateWithSideEffects */Block.__(3, [
                      /* record */[
                        /* time */state[/* time */0],
                        /* timerState : Ticking */0
                      ],
                      (function (self) {
                          setTimeout((function () {
                                  return Curry._1(self[/* send */4], /* Tick */1);
                                }), 1000);
                          return /* () */0;
                        })
                    ]);
        case 1 : 
            var match = state[/* timerState */1];
            if (match !== 0) {
              return /* Update */Block.__(0, [/* record */[
                          /* time */initialTime,
                          /* timerState */state[/* timerState */1]
                        ]]);
            } else {
              return /* UpdateWithSideEffects */Block.__(3, [
                        /* record */[
                          /* time */addSecond(state[/* time */0]),
                          /* timerState */state[/* timerState */1]
                        ],
                        (function (self) {
                            setTimeout((function () {
                                    return Curry._1(self[/* send */4], /* Tick */1);
                                  }), 1000);
                            return /* () */0;
                          })
                      ]);
            }
        case 2 : 
            return /* Update */Block.__(0, [/* record */[
                        /* time */initialTime,
                        /* timerState : Stopped */1
                      ]]);
        
      }
    });
  return newrecord;
}

exports.addSecond = addSecond;
exports.timeToString = timeToString;
exports.component = component;
exports.initialTime = initialTime;
exports.make = make;
/* component Not a pure module */
