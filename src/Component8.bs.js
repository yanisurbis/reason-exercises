// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("GifLoader");

function getGifUrlFromJSON(json) {
  return Json_decode.field("data", (function (json) {
                return Json_decode.field("images", (function (json) {
                              return Json_decode.field("source", (function (json) {
                                            return Json_decode.field("url", Json_decode.string, json);
                                          }), json);
                            }), json);
              }), json);
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* status */1];
      var buttonTitle;
      switch (match) {
        case 0 : 
            buttonTitle = "Fetch random GIF";
            break;
        case 1 : 
            buttonTitle = "Fetching...";
            break;
        case 2 : 
            buttonTitle = "Error occured! Refetch";
            break;
        
      }
      var gifs = List.map((function (gif) {
              return React.createElement("div", {
                          key: gif
                        }, React.createElement("img", {
                              src: gif
                            }));
            }), self[/* state */2][/* gifs */0]);
      return React.createElement("div", undefined, $$Array.of_list(gifs), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(self[/* send */4], /* StartFetching */0);
                        })
                    }, buttonTitle));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* gifs : [] */0,
              /* status : Ok */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        var newGif = action[0];
        if (newGif) {
          return /* Update */Block.__(0, [/* record */[
                      /* gifs */List.append(state[/* gifs */0], /* :: */[
                            newGif[0],
                            /* [] */0
                          ]),
                      /* status : Ok */0
                    ]]);
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* gifs */state[/* gifs */0],
                      /* status : Error */2
                    ]]);
        }
      } else {
        return /* UpdateWithSideEffects */Block.__(3, [
                  /* record */[
                    /* gifs */state[/* gifs */0],
                    /* status : Fetching */1
                  ],
                  (function (self) {
                      fetch("https://api.giphy.com/v1/gifs/random?api_key=cuHpcSHH4zEjGjn0szj3cTBTmAH3dwAn").then((function (prim) {
                                  return prim.json();
                                })).then((function (json) {
                                var gifUrl = getGifUrlFromJSON(json);
                                return Promise.resolve(Curry._1(self[/* send */4], /* FinishFetching */[/* Some */[gifUrl]]));
                              })).catch((function () {
                              return Promise.resolve(Curry._1(self[/* send */4], /* FinishFetching */[/* None */0]));
                            }));
                      return /* () */0;
                    })
                ]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.getGifUrlFromJSON = getGifUrlFromJSON;
exports.make = make;
/* component Not a pure module */
